/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

const express = require("express");
const bodyParser = require("body-parser");
const port = 3000;
const app = express();
let todos = [];
let ctr = 1;

app.use(bodyParser.json());

app.get("/todos", (req, res) => {
    console.log("here");
    res.status(200).send(todos);
});

app.get("/todos/:id", (req, res) => {
    todo = todos.filter((elem) => {
        return elem.id == req.params.id;
    });

    if (todo.length) {
        res.status(200).send(todo[0]);
    } else {
        res.status(404).send("Not Found!");
    }
});

app.post("/todos", (req, res) => {
    id = _getUniqueId();
    todo = {
        id: id,
        completed: false,
        title: req.body.title,
        description: req.body.description,
    };
    todos.push(todo);
    res.status(201).send(todo);
});

app.put("/todos/:id", (req, res) => {
    
    todoIdx = todos.findIndex((elem) => {
        return elem.id == req.params.id;
    });

    if (todoIdx > -1) {
        todos[todoIdx].completed = req.body.completed;
        todos[todoIdx].title = req.body.title || todos[todoIdx].title;
        res.status(200).send('Updated');
    } else {
        res.status(404).send("Not Found!");
    }
});

app.delete("/todos/:id", (req, res) => {
    todoIdx = todos.findIndex((elem) => {
        return elem.id == req.params.id;
    });

    if (todoIdx > -1) {
        todos.splice(todoIdx, 1);
        res.status(200).send('deleted');
    } else {
        res.status(404).send("Not Found!");
    }
});

app.get("*", (req, res) => {
    res.status(404).send("Page not found");
});

app.listen(port, () => {
    console.log(`server started at ${port}`);
});

function _getUniqueId() {
    ctr += 1;
    return ctr;
    multiplier = 100;
    prefix = new Date().getTime() % multiplier;
    suffix = Math.round(Math.random() * 10000);
    root = "";

    corpus =
        "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*(){}[];:/?><.,-=_+";

    for (let i = 0; i < 10; i += 1) {
        rand = Math.round(Math.random() * 1000) % corpus.length;
        root += corpus[rand];
    }
    return prefix + root + suffix;
}

module.exports = app;
